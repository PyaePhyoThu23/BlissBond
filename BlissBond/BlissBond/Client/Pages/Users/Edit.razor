@page "/users/edit/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js
<h3>Edit User</h3>

<FormComponent ButtonText="Update" OnValidSubmit="EditUser" user="user" />
<button class="btn btn-danger" @onclick="DeleteUser">Delete User</button>
@code {
	[Parameter] public int id { get; set; }
	User? user = new User();

	protected async override Task OnParametersSetAsync()
	{
		user = await _client.GetFromJsonAsync<User>($"{Endpoints.UsersEndpoint}/{id}");
	}

	async Task EditUser()
	{
		await _client.PutAsJsonAsync($"{Endpoints.UsersEndpoint}/{id}", user);
		_navManager.NavigateTo("/users/");
	}
    async Task DeleteUser()
    {
        var confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this match?");
        if (confirmed)
        {
            await _client.DeleteAsync($"{Endpoints.UsersEndpoint}/{id}");
            await DeleteRelatedRequestsAndMatches(id);
            _navManager.NavigateTo("/users/");
        }
    }

    private async Task DeleteRelatedRequestsAndMatches(int userId)
    {
        // Delete Requests
        var requests = await _client.GetFromJsonAsync<List<Request>>($"{Endpoints.RequestsEndpoint}");
        var relatedRequests = requests.Where(r => r.RequestorId == userId || r.RecieverId == userId).ToList();
        foreach (var req in relatedRequests)
        {
            await _client.DeleteAsync($"{Endpoints.RequestsEndpoint}/{req.Id}");
        }

        // Delete Matches
        var matches = await _client.GetFromJsonAsync<List<Match>>($"{Endpoints.MatchesEndpoint}");
        var relatedMatches = matches.Where(m => m.User1Id == userId || m.User2Id == userId).ToList();
        foreach (var match in relatedMatches)
        {
            await _client.DeleteAsync($"{Endpoints.MatchesEndpoint}/{match.Id}");
        }
    }
}
