@page "/users/create/signin"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js // Inject the IJSRuntime service

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
<form @onsubmit="HandleLogin">
    <h1 class="h3 mb-3 fw-normal">Please sign in</h1>

    <div class="form-floating">
        <input @bind="user.Email" type="email" class="form-control" id="floatingInput" placeholder="name@example.com">
        <label for="floatingInput">Email address</label>
    </div>
    <div class="form-floating">
        <input @bind="user.Password" type="password" class="form-control" id="floatingPassword" placeholder="Password">
        <label for="floatingPassword">Password</label>
    </div>

    <div class="form-check text-start my-3">
        <input class="form-check-input" type="checkbox" value="remember-me" id="flexCheckDefault">
        <label class="form-check-label" for="flexCheckDefault">
            Remember me
        </label>
    </div>
    <button class="btn btn-primary w-100 py-2" type="submit">Sign in</button>
    <p class="mt-5 mb-3 text-body-secondary">© 2017–2023</p>
</form>

@code {
    private User user = new User();
    private string errorMessage = "";
    private int loggedInUserId = 0; // Added property to store the user ID

    private async Task HandleLogin()
    {
        if (await ValidateCredentialsAsync(user.Email, user.Password))
        {
            // Get the user ID when login is successful
            var user1 = await GetUserByEmailAsync(user.Email);
            if (user1 != null)
            {
                loggedInUserId = user1.Id;

                // Call JavaScript Interop to set the user ID in session storage
                await js.InvokeVoidAsync("sessionStorage.setItem", "loggedInUserId", loggedInUserId);
            }

            // Navigate to another page with the user ID included in the URL
            _navManager.NavigateTo($"/users/create/signin/requests/{loggedInUserId}");
        }
        else
        {
            // Handle incorrect credentials, e.g., show an error message
            errorMessage = "Error 404: Credentials not found."; // Set the error message
        }
    }

    private async Task<bool> ValidateCredentialsAsync(string email, string password)
    {
        // Fetch the list of users from your backend
        List<User> users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");

        // Check if there's a user with the given email and password
        return users.Any(user => user.Email == email && user.Password == password);
    }

    private async Task<User> GetUserByEmailAsync(string email)
    {
        // Fetch the user by email from your backend
        List<User> users = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");
        return users.FirstOrDefault(user => user.Email == email);
    }
}
