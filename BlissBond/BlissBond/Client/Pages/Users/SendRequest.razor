@page "/users/create/signin/requests/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<div class="container">
    <div class="user-profile-section">
        <AuthorizeView>
            <Authorized>
                @if (CurrentUser == null)
                {
                    <div class="alert-alert-info">Loading user info...</div>
                }
                else
                {
                    <div class="user-profile">
                        @if (CurrentUser.ProfilePictureData != null && CurrentUser.ProfilePictureData.Length > 0)
                        {
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(CurrentUser.ProfilePictureData)" alt="Profile Picture" class="profile-picture" />
                        }
                        else
                        {
                            <i class="oi oi-person default-profile-picture"></i>
                        }
                        <div>
                            <h2>@CurrentUser.FirstName @CurrentUser.LastName</h2>
                            <button class="btn btn-edit-profile" @onclick="() => NavigateToEditProfile()">Edit Profile</button>
                            <p>Logged-in User ID: @id</p>
                        </div>
                    </div>
                }
            </Authorized>
        </AuthorizeView>
    </div>

    <div class="requests-section">
        <h3>Requests</h3>
        @if (Users == null)
        {
            <div class="alert-alert-info">Loading requests...</div>
        }
        else
        {
            @foreach (var user in Users)
            {
                <div class="user-request">
                    @if (user.ProfilePictureData != null && user.ProfilePictureData.Length > 0)
                    {
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(user.ProfilePictureData)" alt="User Profile Picture" class="user-picture" />
                    }
                    else
                    {
                        <i class="oi oi-person default-user-picture"></i>
                    }
                    <div class="user-info">
                        <h4>@user.FirstName @user.LastName</h4>
                        <div class="actions">
                            <button class="btn btn-primary" @onclick="() => Requestsend(id, user.Id)">Request</button>
                            <button class="btn btn-view-profile" @onclick="() => ViewProfile(user.Id)">View Profile</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public int id { get; set; }
    private List<User>? Users;
    private List<Request>? UserRequests;
    Request request = new Request();
    private User? CurrentUser;


    protected async override Task OnInitializedAsync()
    {
        await LoadUsersAndRequests();
        await LoadCurrentUser();
    }

    private async Task Requestsend(int requesterUserId, int targetUserId)
    {
        // Set the requester's ID (logged-in user's ID) in the request object
        request.RequestorId = requesterUserId;

        // Set the target user's ID in the request object
        request.RecieverId = targetUserId;

        // Set the status to Pending
        request.Status = "Pending";

        // Call your logic to send the request using the request object
        await _client.PostAsJsonAsync(Endpoints.RequestsEndpoint, request);
    }

    private async Task LoadCurrentUser()
    {
        CurrentUser = await _client.GetFromJsonAsync<User>($"{Endpoints.UsersEndpoint}/{id}");
    }
    // Fetch all users
    private async Task LoadUsersAndRequests()
    {
        // Fetch all users
        var allUsers = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");

        // Fetch all requests
        var allRequests = await _client.GetFromJsonAsync<List<Request>>($"{Endpoints.RequestsEndpoint}");

        // Fetch all matches
        var allMatches = await _client.GetFromJsonAsync<List<Match>>($"{Endpoints.MatchesEndpoint}");

        // Filter requests made by the logged-in user or to the logged-in user with 'Accepted' or 'Pending' status
        UserRequests = allRequests.Where(r => (r.RequestorId == id || r.RecieverId == id) &&
                                              (r.Status == "Accepted" || r.Status == "Pending")).ToList();

        // Extract user IDs to exclude: recipients of pending/accepted requests and the logged-in user
        var excludedUserIds = UserRequests.Select(r => r.RequestorId == id ? r.RecieverId : r.RequestorId)
                                          .Append(id)
                                          .ToHashSet();

        // Add users involved in a match with the logged-in user to the exclusion list
        excludedUserIds.UnionWith(allMatches.Where(m => m.User1Id == id || m.User2Id == id)
                                            .SelectMany(m => new[] { m.User1Id, m.User2Id }));

        // Exclude these users
        Users = allUsers.Where(u => !excludedUserIds.Contains(u.Id)).ToList();
    }

    private void NavigateToEditProfile()
    {
        _navManager.NavigateTo($"/users/edit/{id}");
    }
    private void ViewProfile(int userId)
    {
        _navManager.NavigateTo($"/users/view/{userId}");
    }

}