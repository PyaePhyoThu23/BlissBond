@page "/users/create/signin/requests/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Requests</h3>
<AuthorizeView>
    <Authorized>
        @if (CurrentUser == null)
        {
            <div class="alert-alert-info">Loading user info...</div>
        }
        else
        {
            <div style="text-align: left;">
                @if (CurrentUser.ProfilePictureData != null && CurrentUser.ProfilePictureData.Length > 0)
                {
                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(CurrentUser.ProfilePictureData)" alt="Profile Picture" style="height:100px; width:100px; object-fit:cover;" />
                }
                else
                {
                    <i class="oi oi-person" aria-hidden="true" style="font-size: 100px;"></i> <!-- Display a default icon if no picture exists -->
                }
                <p>@CurrentUser.FirstName @CurrentUser.LastName</p>
                <button class="btn btn-secondary" @onclick="() => NavigateToEditProfile()">Edit Profile</button>
            </div>
        }
        @if (Users == null)
        {
            <div class="alert-alert-info">Loading matches...</div>
        }
        else
        {
            <p>Logged-in User ID: @id</p> <!-- Display the logged-in user's ID -->
            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Users)
                    {    

                        <tr>
                            <td>
                                @if (user.ProfilePictureData != null && user.ProfilePictureData.Length > 0)
                                {
                                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(user.ProfilePictureData)" alt="Profile Picture" style="height:50px; width:50px; object-fit:cover;" />
                                }
                                else
                                {
                                    <i class="oi oi-person" aria-hidden="true"></i> <!-- Default icon if no picture -->
                                }
                            </td>
                            <td>@user.FirstName</td>
                            <td>@user.LastName</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => Requestsend(id, user.Id)">Request</button>
                                <button class="btn btn-info" @onclick="() => ViewProfile(user.Id)">View Profile</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
</AuthorizeView>
@code {
    [Parameter] public int id { get; set; }
    private List<User>? Users;
    private List<Request>? UserRequests;
    Request request = new Request();
    private User? CurrentUser;


    protected async override Task OnInitializedAsync()
    {
        await LoadUsersAndRequests();
        await LoadCurrentUser();
    }

    private async Task Requestsend(int requesterUserId, int targetUserId)
    {
        // Set the requester's ID (logged-in user's ID) in the request object
        request.RequestorId = requesterUserId;

        // Set the target user's ID in the request object
        request.RecieverId = targetUserId;

        // Set the status to Pending
        request.Status = "Pending"; 

        // Call your logic to send the request using the request object
        await _client.PostAsJsonAsync(Endpoints.RequestsEndpoint, request);
    }

    private async Task LoadCurrentUser()
    {
        CurrentUser = await _client.GetFromJsonAsync<User>($"{Endpoints.UsersEndpoint}/{id}");
    }
    // Fetch all users
    private async Task LoadUsersAndRequests()
    {
        // Fetch all users
        var allUsers = await _client.GetFromJsonAsync<List<User>>($"{Endpoints.UsersEndpoint}");

        // Fetch all requests
        var allRequests = await _client.GetFromJsonAsync<List<Request>>($"{Endpoints.RequestsEndpoint}");

        // Fetch all matches
        var allMatches = await _client.GetFromJsonAsync<List<Match>>($"{Endpoints.MatchesEndpoint}");

        // Filter requests made by the logged-in user or to the logged-in user with 'Accepted' or 'Pending' status
        UserRequests = allRequests.Where(r => (r.RequestorId == id || r.RecieverId == id) &&
                                              (r.Status == "Accepted" || r.Status == "Pending")).ToList();

        // Extract user IDs to exclude: recipients of pending/accepted requests and the logged-in user
        var excludedUserIds = UserRequests.Select(r => r.RequestorId == id ? r.RecieverId : r.RequestorId)
                                          .Append(id)
                                          .ToHashSet();

        // Add users involved in a match with the logged-in user to the exclusion list
        excludedUserIds.UnionWith(allMatches.Where(m => m.User1Id == id || m.User2Id == id)
                                            .SelectMany(m => new[] { m.User1Id, m.User2Id }));

        // Exclude these users
        Users = allUsers.Where(u => !excludedUserIds.Contains(u.Id)).ToList();
    }

      private void NavigateToEditProfile()
    {
        _navManager.NavigateTo($"/users/edit/{id}");
    }
    private void ViewProfile(int userId)
    {
        _navManager.NavigateTo($"/users/view/{userId}");
    }

}