@page "/users/"
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js
@attribute [Authorize]

<div class="container py-5 h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
        <div class="col-12 col-md-8 col-lg-6 col-xl-5">
            <div class="card shadow-2-strong" style="border-radius: 1rem;">
                <div class="card-body p-4 p-md-5 text-center">
                    <div class="scrollable-form">
                    <h3 class="mb-4 mb-md-5">Sign Up</h3>
                        <EditForm Model="@user" OnValidSubmit="CreateUser" class="text-start">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <!-- FirstName -->
                            <div class="form-outline mb-4">
                                <label class="form-label">Your First Name</label>
                                <InputText @bind-Value="@user.FirstName" class="form-control form-control-lg" />
                                <ValidationMessage For="@(() => user.FirstName)" />
                            </div>

                            <!-- LastName -->
                            <div class="form-outline mb-4">
                                <label class="form-label">Your Last Name</label>
                                <InputText @bind-Value="@user.LastName" class="form-control form-control-lg" />
                                <ValidationMessage For="@(() => user.LastName)" />
                            </div>

                            <!-- Gender -->
                            <div class="form-outline mb-4">
                                <label class="form-label">Your Gender</label>
                                <InputText @bind-Value="@user.Gender" class="form-control form-control-lg" />
                                <ValidationMessage For="@(() => user.Gender)" />
                            </div>

                            <!-- Email -->
                            <div class="form-outline mb-4">
                                <label class="form-label">Your Email</label>
                                <InputText @bind-Value="@user.Email" class="form-control form-control-lg" />
                                <ValidationMessage For="@(() => user.Email)" />
                            </div>

                            <!-- Password -->
                            <div class="form-outline mb-4">
                                <label class="form-label">Password</label>
                                <InputText type="password" @bind-Value="@user.Password" class="form-control form-control-lg" />
                                <ValidationMessage For="@(() => user.Password)" />
                            </div>
                      
                            <!-- Submit Button -->
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg">Register</button>
                                <a href="/users/create/signin" class="btn btn-secondary btn-lg">Log In</a>
                            </div>
                        </EditForm>
                </div>
                </div>
            </div>
        </div>
    </div>
</div>
            
 
@code {
    User user = new User();

    private async Task CreateUser()
    {
        await _client.PostAsJsonAsync(Endpoints.UsersEndpoint, user);
        _navManager.NavigateTo("/users/create/");
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        if (imageFiles.Count > 0)
        {
            var imageFile = imageFiles.First();
            // Check the file type
            if (imageFile.ContentType == "image/jpeg" || imageFile.ContentType == "image/png")
            {
                using (var stream = imageFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15)) // 15 MB limit
                {
                    byte[] buffer = new byte[imageFile.Size];
                    await stream.ReadAsync(buffer, 0, (int)imageFile.Size);
                    user.ProfilePictureData = buffer;
                }
            }
            else
            {
                // Inform the user about the unsupported file type
                await js.InvokeVoidAsync("alert", "Please upload a JPEG or PNG image.");
            }
        }
    }

}

