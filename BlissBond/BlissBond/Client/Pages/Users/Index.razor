@page "/users/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Users of BlissBond</h3>
<br />
    <a href=" /users/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New User
    </a>
<br />
<br />
@if (Users == null){
    <div class="alert-alert-info">Loading Users...</div>
}else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Id</th>
                <th>LastName</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
            <tr>
                <td>@user.Id</td>
                <td>@user.FirstName</td>
                <td>
                    <a href="/users/view/@user.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/users/edit/@user.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(user.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@code {
    private List<User>? Users;

    protected async override Task OnInitializedAsync()
    {
        Users = await _client.GetFromJsonAsync<List<User>>( $"{Endpoints.UsersEndpoint}");
        Users.Count();
        Console.Write(Users.Count());

    }

    async Task Delete(int userID)
    {
        if (Users != null)
        {
            var user = Users.First(q => q.Id == userID);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {user.FirstName}?");
            if (confirm)
            {

                await _client.DeleteAsync( $"{Endpoints.UsersEndpoint}/{userID}");
                await OnInitializedAsync();
            }
        }
    }
}
