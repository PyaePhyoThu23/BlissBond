@page "/matches/"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3 class="card-title text-center">Your Matches</h3>
<br />

@if (matches == null)
{
    <div class="alert alert-info text-center">Loading matches...</div>
}
else if (matches.Any())
{
    <div class="table-responsive">
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th></th> <!-- Column for profile picture -->
                    <th>User1</th>
                    <th></th>
                    <th>User2</th>
                    <th>Match Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var match in matches)
                {
                    var user1 = users.FirstOrDefault(u => u.Id == match.User1Id);
                    var user2 = users.FirstOrDefault(u => u.Id == match.User2Id);
                    <tr>
                        <td>
                            @if (user1?.ProfilePictureData != null && user1.ProfilePictureData.Length > 0)
                            {
                                <img src="data:image/jpeg;base64,@Convert.ToBase64String(user1.ProfilePictureData)" alt="Profile Picture" style="height:50px; width:50px; object-fit:cover;" />
                            }
                            else
                            {
                                <i class="oi oi-person" aria-hidden="true"></i> <!-- Display a default icon if no picture exists -->
                            }
                        </td>
                       
                        <td>@(user1?.FirstName ?? "Unknown")</td>
                        <td>
                            @if (user2?.ProfilePictureData != null && user2.ProfilePictureData.Length > 0)
                            {
                                <img src="data:image/jpeg;base64,@Convert.ToBase64String(user2.ProfilePictureData)" alt="Profile Picture" style="height:50px; width:50px; object-fit:cover;" />
                            }
                            else
                            {
                                <i class="oi oi-person" aria-hidden="true"></i> <!-- Display a default icon if no picture exists -->
                            }
                        </td>
                        <td>@(user2?.FirstName ?? "Unknown")</td>
                        <td>@match.MatchStatus</td>
                        <td>
                            <button class="btn btn-info btn-sm" @onclick="() => NavigateToChat(match.Id)">
                                Message
                            </button>
                            <button class="btn btn-warning btn-sm" @onclick="() => NavigateToEditPage(match.Id)">
                                Edit
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteMatch(match.Id)">
                                Delete
                            </button>
                            <button class="btn btn-view-profile" @onclick="() => ViewProfile(user2.Id)">View Profile</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p class="text-center">No matches found.</p>
}


@code {
    private List<Match>? matches;
    private List<User>? users;
    private int loggedInUserId; // The ID of the logged-in user

    protected override async Task OnInitializedAsync()
    {
        var result = await js.InvokeAsync<string>("sessionStorage.getItem", "loggedInUserId");
        if (!string.IsNullOrEmpty(result) && int.TryParse(result, out int parsedUserId))
        {
            loggedInUserId = parsedUserId;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        var allMatches = await FetchAllMatches();
        if (allMatches != null)
        {
            matches = allMatches.Where(m => m.User1Id == loggedInUserId || m.User2Id == loggedInUserId).ToList();

            var userIds = matches.Select(m => m.User1Id).Concat(matches.Select(m => m.User2Id)).Distinct();
            users = await FetchUserDetails(userIds);
        }
        else
        {
            matches = new List<Match>();
        }
    }

    private async Task<List<Match>> FetchAllMatches()
    {
        var response = await _client.GetFromJsonAsync<List<Match>>(Endpoints.MatchesEndpoint);
        return response ?? new List<Match>();
    }

    private async Task<List<User>> FetchUserDetails(IEnumerable<int> userIds)
    {
        var userDetails = new List<User>();

        foreach (var userId in userIds)
        {
            var user = await _client.GetFromJsonAsync<User>($"{Endpoints.UsersEndpoint}/{userId}");
            if (user != null)
            {
                userDetails.Add(user);
            }
        }

        return userDetails;
    }

    private void NavigateToEditPage(int matchId)
    {
        NavigationManager.NavigateTo($"/matches/edit/{matchId}");

    }

    private void NavigateToChat(int matchUserId)
    {
        NavigationManager.NavigateTo($"/matches/{matchUserId}");
    }

    private async Task DeleteMatch(int matchId)
    {
        var confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this match?");
        if (confirmed)
        {
            // Fetch the match details to get User1Id and User2Id
            var matchToDelete = matches.FirstOrDefault(m => m.Id == matchId);
            if (matchToDelete != null)
            {
                // Delete all requests between User1 and User2
                var requestsToDelete = await _client.GetFromJsonAsync<List<Request>>($"{Endpoints.RequestsEndpoint}");
                var filteredRequests = requestsToDelete.Where(r =>
                    (r.RequestorId == matchToDelete.User1Id && r.RecieverId == matchToDelete.User2Id) ||
                    (r.RequestorId == matchToDelete.User2Id && r.RecieverId == matchToDelete.User1Id)
                ).ToList();

                foreach (var req in filteredRequests)
                {
                    await _client.DeleteAsync($"{Endpoints.RequestsEndpoint}/{req.Id}");
                }

                // Delete the match
                var response = await _client.DeleteAsync($"{Endpoints.MatchesEndpoint}/{matchId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadData(); // Reload data to reflect changes
                }
                else
                {
                    // Handle error response
                }
            }
        }
    }

    private void ViewProfile(int userId)
    {
        NavigationManager.NavigateTo($"/users/view/{userId}");
    }

}
