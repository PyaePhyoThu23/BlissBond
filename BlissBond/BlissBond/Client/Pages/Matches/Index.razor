@page "/matches/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
<h3 class="card-title">Matches</h3>
<br />

@if (Matches == null){
<div class="alert-alert-info">Loading matches...</div>
}else
{
<table class="table table-responsive">
    <thead>
        <tr>
            <th>Id</th>
            <th>Match Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var match in Matches)
        {
            <tr>
                <td>@match.Id</td>
                <td>@match.MatchStatus</td>
                <td>
                    <a href="/matches/view/@match.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/users/edit/@match.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(match.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
}
@code {
    private List<Match>? Matches;

    protected async override Task OnInitializedAsync()
    {
        Matches = await _client.GetFromJsonAsync<List<Match>>($"{Endpoints.MatchesEndpoint}");
        Matches.Count();
        Console.Write(Matches.Count());

    }

    async Task Delete(int matchID)
    {
        if (Matches != null)
        {
            var match = Matches.First(q => q.Id == matchID);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {match.Id}?");
            if (confirm)
            {

                await _client.DeleteAsync($"{Endpoints.MatchesEndpoint}/{matchID}");
                await OnInitializedAsync();
            }
        }
    }
}


   



