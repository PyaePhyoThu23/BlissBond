@page "/requests/"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager _navManager
@attribute [Authorize]

<h1>User ID: @userId</h1>
<a href=" /requests/list" class="btn btn-secondary">
    Your Request List
</a>
<div class="container">
    <div class="requests-section">
        <h3>Requests</h3>
        @if (requests != null && requests.Any())
        {
            foreach (var request in requests)
            {
                <div class="user-request">
                    @if (users.FirstOrDefault(u => u.Id == request.RequestorId)?.ProfilePictureData != null)
                    {
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(users.FirstOrDefault(u => u.Id == request.RequestorId).ProfilePictureData)" alt="Requestor Profile Picture" class="user-picture" />
                    }
                    else
                    {
                        <i class="oi oi-person default-user-picture"></i>
                    }
                    <div class="requestor-info">
                        <div class="requestor-name">@users.FirstOrDefault(u => u.Id == request.RequestorId)?.FirstName @users.FirstOrDefault(u => u.Id == request.RequestorId)?.LastName</div>
                        <div class="actions">
                            <button class="btn btn-view-profile" @onclick="() => ViewProfile(request.RequestorId)">View Profile</button>
                            <button class="btn btn-primary" @onclick="() => AcceptRequest(request.Id)">Accept</button>
                            <button class="btn btn-view-profile" @onclick="() => RejectRequest(request.Id)">Reject</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="alert-alert-info">No requests found for the user.</div>
        }
    </div>
</div>
@code {
    private int userId; // Variable to store the user ID
    private List<Request> requests; // List to store the retrieved requests
    private List<User> users;
    private HashSet<int> respondedRequests = new HashSet<int>();

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the user ID from session storage using JavaScript Interop
        var result = await js.InvokeAsync<string>("sessionStorage.getItem", "loggedInUserId");

        // Check if the result is not null and can be parsed as an integer
        if (!string.IsNullOrEmpty(result) && int.TryParse(result, out int parsedUserId))
        {
            userId = parsedUserId;
        }

        // Fetch the requests that match the user ID
        await LoadRequests();
    }

    private async Task LoadRequests()
    {
        // Make an HTTP request to retrieve the requests
        var response = await _client.GetFromJsonAsync<List<Request>>($"{Endpoints.RequestsEndpoint}");

        // Filter the requests based on the user ID and status "Pending"
        requests = response.Where(r => r.RecieverId == userId && r.Status == "Pending").ToList();

        users = await FetchUserDetails(requests.Select(r => r.RequestorId).Concat(requests.Select(r => r.RecieverId)).Distinct());
    }

    private async Task<List<User>> FetchUserDetails(IEnumerable<int> userIds)
    {
        var userDetails = new List<User>();

        foreach (var userId in userIds)
        {
            var user = await _client.GetFromJsonAsync<User>($"{Endpoints.UsersEndpoint}/{userId}");
            if (user != null)
            {
                userDetails.Add(user);
            }
        }

        return userDetails;
    }

    private async Task AcceptRequest(int requestId)
    {
        // Logic to accept the request
        // Update the request status and create a match
        var request = requests.FirstOrDefault(r => r.Id == requestId);
        if (request != null)
        {
            request.Status = "Accepted";
            await _client.PutAsJsonAsync($"{Endpoints.RequestsEndpoint}/{requestId}", request);

            // Create a match
            var match = new Match
                {
                    User1Id = request.RequestorId,
                    User2Id = request.RecieverId,
                    MatchDate = DateTime.Now,
                    MatchStatus = "Matched"
                };
            await _client.PostAsJsonAsync(Endpoints.MatchesEndpoint, match);

            respondedRequests.Add(requestId);
        }
    }

    private async Task RejectRequest(int requestId)
    {
        // Logic to reject the request
        // Update the request status
        var request = requests.FirstOrDefault(r => r.Id == requestId);
        if (request != null)
        {
            request.Status = "Rejected";
            await _client.PutAsJsonAsync($"{Endpoints.RequestsEndpoint}/{requestId}", request);
            respondedRequests.Add(requestId);
        }
    }

    private void ViewProfile(int userId)
    {
        _navManager.NavigateTo($"/users/view/{userId}");
    }

}
