@page "/requests/list"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h1>User ID: @userId</h1>

<div class="request-list-container" style="max-height: 500px; overflow-y: auto;">
    @if (requests != null && requests.Any())
    {
        @foreach (var request in requests)
        {
            var receiver = users.FirstOrDefault(u => u.Id == request.RecieverId);
            <div class="request-entry">
                <div class="profile-and-action">
                    @if (receiver?.ProfilePictureData != null && receiver.ProfilePictureData.Length > 0)
                    {
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(receiver.ProfilePictureData)" alt="Receiver Profile Picture" class="user-profile-pic" />
                    }
                    else
                    {
                        <i class="oi oi-person default-user-picture"></i>
                    }
                    <div class="receiver-details">
                        <div class="receiver-name">@receiver?.FirstName @receiver?.LastName</div>
                        <div class="request-status">Status: @(request.Status)</div>
                        @if (!respondedRequests.Contains(request.Id) && request.Status != "Rejected")
                        {
                            
                            <button class="btn btn-unsent" @onclick="() => DeleteRequest(request.Id)">Unsend</button>
                        }
                    </div>
                </div> <!-- Closing tag for profile-and-action -->
            </div> <!-- Closing tag for request-entry -->
        }
    }
    else
    {
        <p>No requests found for the user.</p>
    }
</div> <!-- Closing tag for request-list-container -->
@code {
    private int userId; // Variable to store the user ID
    private List<Request> requests; // List to store the retrieved requests
    private List<User> users;
    private HashSet<int> respondedRequests = new HashSet<int>();

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the user ID from session storage using JavaScript Interop
        var result = await js.InvokeAsync<string>("sessionStorage.getItem", "loggedInUserId");

        // Check if the result is not null and can be parsed as an integer
        if (!string.IsNullOrEmpty(result) && int.TryParse(result, out int parsedUserId))
        {
            userId = parsedUserId;
        }

        // Fetch the requests that match the user ID
        await LoadRequests();
    }

    private async Task LoadRequests()
    {
        // Make an HTTP request to retrieve the requests
        var response = await _client.GetFromJsonAsync<List<Request>>($"{Endpoints.RequestsEndpoint}");

        // Filter the requests based on the user ID
        //requests = response.Where(r => r.RequestorId == userId).ToList();
        requests = response.Where(r => r.RequestorId == userId && r.Status != "Accepted").ToList();

        users = await FetchUserDetails(requests.Select(r => r.RequestorId).Concat(requests.Select(r => r.RecieverId)).Distinct());
    }

    private async Task<List<User>> FetchUserDetails(IEnumerable<int> userIds)
    {
        var userDetails = new List<User>();

        foreach (var userId in userIds)
        {
            var user = await _client.GetFromJsonAsync<User>($"{Endpoints.UsersEndpoint}/{userId}");
            if (user != null)
            {
                userDetails.Add(user);
            }
        }

        return userDetails;
    }

    private async Task DeleteRequest(int requestId)
    {
        await _client.DeleteAsync($"{Endpoints.RequestsEndpoint}/{requestId}");
        requests.RemoveAll(r => r.Id == requestId);
    }
}
