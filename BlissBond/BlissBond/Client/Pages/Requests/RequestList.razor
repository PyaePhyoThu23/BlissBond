@page "/requests/list"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h1 class="h3 mb-3 fw-normal">User ID: @userId</h1>

@if (requests != null && requests.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Request Name</th>
                <th></th>
                <th>Receiver Name</th>
                <th>Status</th>
                <!-- Other request table headers -->
            </tr>
        </thead>
        <tbody>
            @foreach (var request in requests)
            {
                var requestor = users.FirstOrDefault(u => u.Id == request.RequestorId);
                var receiver = users.FirstOrDefault(u => u.Id == request.RecieverId);

                <tr>
                    <td>
                        @if (requestor?.ProfilePictureData != null && requestor.ProfilePictureData.Length > 0)
                        {
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(requestor.ProfilePictureData)" alt="Requestor Profile Picture" class="user-profile-pic" />
                        }
                        else
                        {
                            <i class="oi oi-person" aria-hidden="true"></i> <!-- Display a default icon if no picture exists -->
                        }
                    </td>
                    <td>@requestor?.FirstName</td>
                    <td>
                        @if (receiver?.ProfilePictureData != null && receiver.ProfilePictureData.Length > 0)
                        {
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(receiver.ProfilePictureData)" alt="Receiver Profile Picture" class="user-profile-pic" />
                        }
                        else
                        {
                            <i class="oi oi-person" aria-hidden="true"></i> <!-- Display a default icon if no picture exists -->
                        }
                    </td>
                    <td>@receiver?.FirstName</td>
                    <td>@request.Status</td> <!-- Display the request status -->

                    <td>
                        @if (!respondedRequests.Contains(request.Id) && request.Status != "Rejected")
                        {
                            <button class="btn btn-danger" @onclick="() => DeleteRequest(request.Id)">Unsend</button>
                        }
                    </td>

                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No requests found for the user.</p>
}

@code {
    private int userId; // Variable to store the user ID
    private List<Request> requests; // List to store the retrieved requests
    private List<User> users;
    private HashSet<int> respondedRequests = new HashSet<int>();

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the user ID from session storage using JavaScript Interop
        var result = await js.InvokeAsync<string>("sessionStorage.getItem", "loggedInUserId");

        // Check if the result is not null and can be parsed as an integer
        if (!string.IsNullOrEmpty(result) && int.TryParse(result, out int parsedUserId))
        {
            userId = parsedUserId;
        }

        // Fetch the requests that match the user ID
        await LoadRequests();
    }

    private async Task LoadRequests()
    {
        // Make an HTTP request to retrieve the requests
        var response = await _client.GetFromJsonAsync<List<Request>>($"{Endpoints.RequestsEndpoint}");

        // Filter the requests based on the user ID
        //requests = response.Where(r => r.RequestorId == userId).ToList();
        requests = response.Where(r => r.RequestorId == userId && r.Status != "Accepted").ToList();

        users = await FetchUserDetails(requests.Select(r => r.RequestorId).Concat(requests.Select(r => r.RecieverId)).Distinct());
    }

    private async Task<List<User>> FetchUserDetails(IEnumerable<int> userIds)
    {
        var userDetails = new List<User>();

        foreach (var userId in userIds)
        {
            var user = await _client.GetFromJsonAsync<User>($"{Endpoints.UsersEndpoint}/{userId}");
            if (user != null)
            {
                userDetails.Add(user);
            }
        }

        return userDetails;
    }

    private async Task DeleteRequest(int requestId)
    {
        await _client.DeleteAsync($"{Endpoints.RequestsEndpoint}/{requestId}");
        requests.RemoveAll(r => r.Id == requestId);
    }
}
